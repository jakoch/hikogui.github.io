#
# .github/workflows/build-docs.yml
#
# Copyright 2021 Jens A. Koch.
# SPDX-License-Identifier: BSL-1.0
# This file is part of ttauri-project.
#

name: Docs

on:
  push:
    branches:
      - main
      - new_theme
    # trigger this workflow, on receiving the repo_dispatch event type "build_documentation"
    repository_dispatch:
      types: [build_documentation]
    # add button to trigger this workflow manually
    workflow_dispatch:

jobs:

  build-docs:
    name: Generate Documentation

    runs-on: ubuntu-20.04

    steps:
      # Checks out a copy of your repository.
      - name: ü§ò Checkout Code
        uses: actions/checkout@v2 # https://github.com/actions/checkout

      # Install tools for documentation generation.
      - name: üîΩ Install Tools
        # sudo apt-get upgrade -y
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -y
          sudo apt-get install -y doxygen graphviz

      # Show the version of the tools we use, e.g. Doxygen. Graphviz version is displayed via "dot".
      - name: ‚Ñπ Show Tool Versions
        run: |
          doxygen -v
          dot -V

      # Get the source repository, for which we want to generate the documentation for.
      - name: üîΩ Get Source Repository ‚ûû ttauri
        run: |
          rm -rf ttauri
          git clone https://github.com/ttauri-project/ttauri.git ttauri

      # Get the source repository, for the doxygen theme.
      - name: üîΩ Get Source Repository ‚ûû doxygen-awesome-theme
        run: |
          git clone https://github.com/jothepro/doxygen-awesome-css.git theme

      # ttauri_versions.txt: Get the list of version numbers from git tags, sorted in reverse and add "main" on top.
      # ttauri_latest_version.txt: Get latest tag version without "v" prefix.
      - name: üñâ Get Versions
        run: |
          cd ttauri
          git fetch --tags
          (echo "main" && git tag -l --sort=-version:refname "v*") > ../ttauri_versions.txt
          echo "Available versions:" && cat ../ttauri_versions.txt
          git tag --sort=committerdate | tail -1 | cut -c2- > ../ttauri_latest_version.txt
          echo "Latest version:" && cat ../ttauri_latest_version.txt

      # Convert version data from txt to json.
      - name: üñâ Create versions.json
        run: |
          echo "{\"latest_version\":\"$(<ttauri_latest_version.txt)\"}" > ttauri_latest_version.json
          cat ttauri_versions.txt | jq -Rsc 'split("\n") | map(select(. != "")) | .[]|ltrimstr("v")' | jq -s '{ versions: . }' > ttauri_versions.json
          jq -s '.[0] + .[1]' ttauri_latest_version.json ttauri_versions.json | jq -c '{ttauri: [.] }' > versions.json
          echo "versions.json:" && cat versions.json

      # Insert version data into dropdown script, replacing tokens @LATEST_VERSION@ and @VERSIONS@.
      - name: üñâ Update dropdown_menu.js
        run: |
          VERSIONS=`jq -c '.ttauri[] | .versions' versions.json`
          sed -i "s|@VERSIONS@|$VERSIONS|" scripts/version_dropdown.js
          LATEST_VERSION=`jq -c '.ttauri[] | .latest_version' versions.json`
          sed -i "s|@LATEST_VERSION@|$LATEST_VERSION|" scripts/version_dropdown.js

      # Run doxygen on the checkout of each tag to generate documentation for each version.
      - name: üôè Build Documentation
        run: scripts/build_docs.sh

      # Drop a readme.md into the /docs folder, which contains the documentations overview.
      - name: üñâ Build Documentation Overview (/docs/index.html)
        run: cp scripts/docs_readme.md docs/readme.md

      # Delete all files, which should not be published on the website branch.
      - name: ‚úó Pre-Commit Cleanup
        run: |
          rm .gitignore ttauri_*.txt ttauri_*.json
          rm -rf .git .github scripts ttauri
          ls

      # Re-initialize the cleaned repo and commit it.
      - name: ‚úî Commit
        run: |
          git init
          git add -A
          git config --local user.email "github-actions[bot]@users.noreply.ttauri-project.org"
          git config --local user.name "github-actions[bot]"
          git commit -m "Publish docs from ${GITHUB_REPOSITORY}@${GITHUB_SHA:0:9}"

      # Push the repo to the gh-pages branch.
      - name: üöÄ Push
        uses: ad-m/github-push-action@v0.6.0 # https://github.com/ad-m/github-push-action
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          directory: ${{ env.GITHUB_WORKSPACE }}
          force: true

      # Automatically removes all workflow runs older than 7 days, but always keeps the last run.
      - name: ‚úó Delete Workflow Runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 7
          keep_minimum_runs: 1
